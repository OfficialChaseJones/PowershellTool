#################################################################
#
#    This is a simple tool to contain powershell scripts and other
#    commands you might need on a regular basis, and presents them
#    in a window to be executed at a click of a button.
#
#    Do not edit this file! To add an option, 
#        1) use Config_Template.ps1, save as Config_[your tool name].ps1
#        2) Change the values were specified. 
#        3) Thats it!
#
#################################################################
cls

class ToolOption {
    [string]$Name
    [string]$Description
    [string]$function
    $Parameters
    }

class ToolParameter {
    [string]$Name
    [string]$DefaultValue
    [int]$ParameterIndex
    $ControlPointer
    }


$ToolOptions = @()
$DefaultsHash = @{}

#################################################################
#This will look for files of the pattern "Config*.ps1"
$LocalFiles = Get-ChildItem $PSScriptRoot

ForEach($File in $LocalFiles)
{
    if($File.Name -like 'Config*.ps1' -and $File.Name -ne 'Config_Template.ps1')
    {
        $FileName = $File.Name
        Write-Host "Reading File:$FileName"
        
        . "$PSScriptRoot\$FileName"
    }
}

$DefaultsFilePath = "$PSScriptRoot\DefaultParameters.txt"

if([System.IO.File]::Exists($DefaultsFilePath))
{
    Write-Host "Read Defaults"
    
    $json = Get-Content -Path $DefaultsFilePath -Raw 
    $DefaultsHash = @{}
    (ConvertFrom-Json $json).psobject.properties | Foreach { $DefaultsHash[$_.Name] = $_.Value }

    Write-Host $DefaultsHash.Count
}

#################################################################
$AddedControls = New-Object System.Collections.ArrayList

Function SaveDefaults()
{
    $DefaultsHash | ConvertTo-JSON | Set-Content -Path $DefaultsFilePath
}

Function OnChangeDropDown()
{
    Write-Host "On change"
    Write-Host $ComboBox.selectedItem

    $ParametersLabel.Text =  ""
    $ResultsLabel.Text = ""

    $ParameterIndex = 0

    $SelectedTool = getSelectedTool

    #Write-Host "option found"
    RemoveOldControls

    $DescriptionLabel.Text = $SelectedTool.Description

    ForEach($Param in $SelectedTool.Parameters)
    {
        $ParametersLabel.Text =  "Specify Parameters"

        #Load Parameters
        AddParameter $ParameterIndex $Param $SelectedTool.Name
        $ParameterIndex++
    }
    $main_form.Refresh
        
    
}
Function RemoveOldControls
{
    ForEach($control in $AddedControls)
    {
        $main_form.Controls.Remove($control)
    }

    $main_form.Refresh

    $AddedControls = New-Object System.Collections.ArrayList
}

Function AddParameter($paramindex, $Param,$SelectedToolName)
{
    $Label = New-Object System.Windows.Forms.Label
    $Label.Text = $Param.Name
    $y = 100+[int](20*$paramindex)
    $Label.Location  = New-Object System.Drawing.Point(20,$y)
    $Label.AutoSize = $true
    #Write-Host "adding $Param.Name" 
    $main_form.Controls.Add($Label)

    $Textbox = New-Object System.Windows.Forms.TextBox

    $HashKey = $SelectedToolName + "|" + $Param.Name
    $DefaultOverride = $DefaultsHash[$HashKey]

    Write-Host $HashKey
    Write-Host $DefaultOverride

    if($DefaultOverride -ne $null)
    {
        $Textbox.Text = $DefaultOverride
    }
    else {
        $Textbox.Text = $Param.DefaultValue
    }

    $Textbox.Location  = New-Object System.Drawing.Point(220,$y)
    $Textbox.Width = 300
    $Textbox.AutoSize = $true
    $Param.ControlPointer = $Textbox
    $main_form.Controls.Add($Textbox)

    $AddedControls.Add($Label)
    $AddedControls.Add($Textbox)
}

Function getSelectedTool
{
    $SelectedItem = $ComboBox.selectedItem

    ForEach ($option in $ToolOptions)
    {
        $ParameterIndex = 0

        if($SelectedItem -eq $option.Name)
        {
            return $option
        }

    }

    return $null
}




Add-Type -assembly System.Windows.Forms


$main_form = New-Object System.Windows.Forms.Form
$main_form.Text ='PS Tools'
$main_form.Width = 600
$main_form.Height = 400
$main_form.AutoSize = $true

#Add 1 label
$Label = New-Object System.Windows.Forms.Label
$Label.Text = "Select A Tool"
$Label.Location  = New-Object System.Drawing.Point(0,10)
$Label.AutoSize = $true
$main_form.Controls.Add($Label)

#Add Combo box
$ComboBox = New-Object System.Windows.Forms.ComboBox
$ComboBox.Width = 450

ForEach ($option in $ToolOptions)
{
    $ComboBox.Items.Add($Option.Name);
}
$ComboBox.Location  = New-Object System.Drawing.Point(90,10)
$ComboBox.add_SelectedIndexChanged(
    {
        OnChangeDropDown
    }
)


$main_form.Controls.Add($ComboBox)


#Second label
$ParametersLabel = New-Object System.Windows.Forms.Label
$ParametersLabel.Text = ""
$ParametersLabel.Location  = New-Object System.Drawing.Point(0,80)
$ParametersLabel.AutoSize = $true
$main_form.Controls.Add($ParametersLabel)

$DescriptionLabel = New-Object System.Windows.Forms.Label
$DescriptionLabel.Text = ""
$DescriptionLabel.Location  = New-Object System.Drawing.Point(20,40)
$DescriptionLabel.AutoSize = $true
$main_form.Controls.Add($DescriptionLabel)

#Results label
$ResultsLabel = New-Object System.Windows.Forms.Label
$ResultsLabel.Text = ""
$ResultsLabel.Location  = New-Object System.Drawing.Point(0,330)
$ResultsLabel.AutoSize = $true
$main_form.Controls.Add($ResultsLabel)

#Add button
$Button = New-Object System.Windows.Forms.Button
$Button.Location = New-Object System.Drawing.Size(50,350)
$Button.Size = New-Object System.Drawing.Size(120,23)
$Button.Text = "Execute"
$main_form.Controls.Add($Button)

$DefaultsButton = New-Object System.Windows.Forms.Button
$DefaultsButton.Location = New-Object System.Drawing.Size(250,350)
$DefaultsButton.Size = New-Object System.Drawing.Size(220,23)
$DefaultsButton.Text = "Save These Parameters as Defaults"
$main_form.Controls.Add($DefaultsButton)


$Button.Add_Click(
    {
        $SelectedTool = getSelectedTool

        $NumberOfArguments = $SelectedTool.Parameters.Count


        $ParameterHash = @{}

        $LogEntry = Get-Date -format 'u'
        $LogEntry +="|"+$SelectedTool.Name

        ForEach($Param in $SelectedTool.Parameters)
        {

            $ParameterHash.Add($Param.Name,$Param.ControlPointer.Text)
            
            $ParameterLogSegment = $Param.Name + "=["+$Param.ControlPointer.Text+"]"

            $LogEntry +="|"+$ParameterLogSegment
        }

        
        
        #Output to log
        Add-Content "$PSScriptRoot\PowerShellTools.log" $LogEntry

        #HeyFunction "abc" "def"
        $functionToCall = $SelectedTool.function
        $output = invoke-expression  "$functionToCall `$ParameterHash"

        $ResultsLabel.Text = $output
    }
)


$DefaultsButton.Add_Click(
    {
    #Todo use defaults when loading

        $SelectedTool = getSelectedTool

        ForEach($Param in $SelectedTool.Parameters)
        {
            $HashKey = $SelectedTool.Name + "|" + $Param.Name
            $DefaultsHash.Remove($HashKey)
            $DefaultsHash.Add($HashKey,$Param.ControlPointer.Text)
        }
        SaveDefaults
    }
)
#Dispaly window
$main_form.ShowDialog()
